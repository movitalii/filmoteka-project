{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,oDACeC,ECDZ,W,sBDCkBC,I,aAEbC,KAAKC,OAAS,GACdD,KAAKE,KAAO,EACZF,KAAKG,GAAK,I,iBAGRC,IAAA,c,MAAN,W,kBAAAC,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IAMUJ,EAECK,EACEC,E,wEAJS,gDACbN,EALW,CAChBA,IAAM,oCAIAA,I,SAEmBO,EAAAC,QAAMC,IAAI,GAAuBC,OAHxC,gDAG6B,aAAeA,OAAJV,EAAI,oB,cAAvDK,EAAQM,EAAAC,KACPN,EAAWD,EAASQ,KAAnBP,OACLQ,QAAQC,IAAI,KAAM,CAAC,CAACT,WAASP,IAC7BiB,EAAKlB,MAAQ,E,kBAGN,CAACQ,W,2CAdhB,E,IAiBON,IAAA,a,MAAN,W,kBAAAC,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IAMSJ,EAECK,EACCQ,E,wEAJU,gDACbb,EALW,CAChBA,IAAM,oCAIAA,I,SAEmBO,EAAAC,QAAMC,IAAI,GAAuBC,OAHxC,gDAG6B,aAAeA,OAAJV,I,cAAnDK,EAAQM,EAAAC,KACPC,EAAOR,EAASQ,KAEpBG,EAAKlB,MAAQ,EACpBgB,QAAQC,IAAIF,EAAKI,S,kBACHJ,G,2CAbd,E,IAkBAb,IAAA,Y,MAAA,WACGJ,KAAKE,KAAO,C,IAGZE,IAAA,c,IAAJ,WACI,OAAOJ,KAAKC,M,MAEhB,SAAgBqB,GACZtB,KAAKC,OAASqB,C,OCnDnB,GCAY,SAAAC,EAAgBC,G,IAACC,EAADD,EAACC,YAAaC,EAAdF,EAAcE,KAAMC,EAApBH,EAAoBG,MAAOC,EAA3BJ,EAA2BI,UAAWC,EAAtCL,EAAsCK,aAA4BC,GAAlEN,EAAoDO,aAApDP,EAAkEM,gBAE7F,MAAO,qCACkBhB,OAFL,uCAGIA,OADCW,EAAY,yFAGXX,OAFFY,GAAMC,EAAM,sEAIhCb,OAFsBc,EAAW,qCAGlCd,OADCe,EAAeA,EAAaG,MAAM,EAAG,GAAKF,EAAeE,MAAM,EAAG,GACnE,iC,kBCJDC,EAAa,IAAInC,EACjBoC,EAAe,aAErBD,EAAWE,cAAcC,MAAK,SAAAnB,GAC5B,IAAMoB,EAASpB,EAAKP,OACpB4B,aAAaC,QAAQL,EAAYM,KAAKC,UAAUJ,G,IAIlDJ,EAAWS,aAAaN,MAAK,SAAAnB,IAC3B,EAAA0B,EAAAC,UAAS3B,EAAKf,KAAMe,EAAKI,SAO3B,SAAyBJ,GAEvBC,QAAQC,IAAIF,EAAKI,SACjB,IAAMwB,EAAO5B,EAAKI,QAAQyB,KAAI,SAAAC,GAC5B,IAAIC,EAAY,GA0BhB,OAzBAD,EAAOnB,UAAUqB,SAAQ,SAAAC,GAEvBC,EAAOF,SAAQ,SAAAG,GAETF,IAAYE,EAAOjD,IACrB6C,EAAUK,KAAK,GAAevC,OAAZsC,EAAO1B,M,OAM3BsB,EAAUM,OAAS,IACrBN,EAAYA,EAAUhB,MAAM,EAAG,IACrBqB,KAAK,YAGQ,IAArBL,EAAUM,QAEZN,EAAUK,KAAK,aAEjBN,EAAOnB,UAAYoB,EAEnB9B,QAAQC,IAAI,SAAUoC,OAAOC,OAAOT,EAAOnB,YAGpCmB,C,IACLD,KAAI,SAAAC,G,OAAUxB,EAAOwB,E,IAASU,KAAK,IACrCvC,QAAQC,IAAI,OAAQ0B,GACtBa,SAASC,cAAe,YAAWC,mBAAmB,YAAaf,E,CAvCnEgB,CAAgB5C,E,IAElB,IAAM6C,EAAYxB,aAAayB,QAAQ7B,GAE/BiB,EAASX,KAAKwB,MAAMF,E","sources":["src/js/api-service.js","<<jsx-config-pragma.js>>","src/js/card.js","src/js/fetchImages.js"],"sourcesContent":["import axios from \"axios\";\nexport default class ApiService {\n    constructor (){\n        this.images = '';\n        this.page = 1;\n        this.id = null;\n    }   \n\n    async fetchGenres() {\n        const options = {\n        key: `3ff086ca8fded08ba42938358b3327b4`,      \n       \n        };\n        const BASE_URL = `https://api.themoviedb.org/3/genre/movie/list`\n        let  {key} = options;\n       \n         const response  = await axios.get(`${BASE_URL}?api_key=${key}&language=en-US`)\n          const {genres} = response.data;          \n            console.log('id', [{genres}].id)\n            this.page += 1;        \n            // genre_ids\n            // console.log(genres)\n            return {genres};\n         };    \n\n     async fetchImage() {\n        const options = {\n        key: `3ff086ca8fded08ba42938358b3327b4`,      \n       \n        };\n        const BASE_URL = `https://api.themoviedb.org/3/trending/all/day`\n        let  {key} = options;\n       \n         const response  = await axios.get(`${BASE_URL}?api_key=${key}`)\n          const data = response.data;          \n         \n            this.page += 1;        \n     console.log(data.results)\n            return data;\n         }; \n         \n         \n   \n     clearForm() {\n        this.page = 1;\n    }\n\n    get searchQuery() {\n        return this.images;\n    }\n    set searchQuery(newSearchQuery){\n        this.images = newSearchQuery;\n    }\n    \n};",null,"export default function onCard({poster_path, name, title, genre_ids, release_date, vote_average, first_air_date}) {\n    const BASE_IMAGE = `https://image.tmdb.org/t/p/original`\n    return `<div class=\"card\">\n    <img src=\"${BASE_IMAGE}${poster_path}\" alt=\"A FISTFUL OF LEAD\" class=\"card_image\" width=\"300\">\n    <h2 class=\"card_name\">${name||title}</h2>\n    <div class='card_text'>\n      <p class=\"card_title\">${genre_ids }</p>\n      <p class='card_year'>${\n        release_date ? release_date.slice(0, 4) : first_air_date.slice(0, 4)\n      }</p>      \n    </div>\n</div>`    \n}\n\n/* <p class=\"card_rating\">  ${ vote_average.toFixed(1)}</p> */\n","import ApiService from './api-service';\nimport onCard from './card';\n// Ed import//\nimport { saveInfo, getInfo, removeInfo } from './storage_api';\n/////////////\nconst apiService = new ApiService();\nconst GENRE_NAME   = 'genre_card';\n\napiService.fetchGenres().then(data => {\n  const genres = data.genres\n  localStorage.setItem(GENRE_NAME, JSON.stringify(genres))\n//  console.log('ok', data.genres);\n});\n\napiService.fetchImage().then(data => {\n  saveInfo(data.page, data.results); // добавил сохранение в локалсторедж при обращении к АПИ////////\n  addArticleImage(data);\n});\nconst genreName = localStorage.getItem(GENRE_NAME);\n  // console.log('genre', genreName)\n  const genres = JSON.parse(genreName);  \n\nfunction addArticleImage(data) {\n  \n  console.log(data.results);\n  const cart = data.results.map(result => {\n    let genresArr = [];\n    result.genre_ids.forEach(genreID => {\n      // console.log(genreID)\n      genres.forEach(genOBJ => {\n        // console.log(genOBJ)\n        if (genreID === genOBJ.id) {\n          genresArr.push(`${genOBJ.name}`);\n          // console.log(genresArr)\n        }\n      });\n    });\n    \n    if (genresArr.length > 3) {\n      genresArr = genresArr.slice(0, 2);\n      genresArr.push(' other..');\n           \n    } \n    if (genresArr.length === 0) {\n      \n      genresArr.push('no genres');\n    }\n    result.genre_ids = genresArr;\n    // console.log(result)\n    console.log('odject', Object.values(result.genre_ids)) \n    \n    \n    return result;\n  } ).map(result => onCard(result)).join('');\n    console.log('cart', cart)\n  document.querySelector(`.gallery`).insertAdjacentHTML('beforeend', cart);\n}\n"],"names":["$bpxeT","parcelRequire","$0ed9756ae2b68474$export$2e2bcd8739ae039","ApiService","this","images","page","id","key","$parcel$interopDefault","$2TvXO","mark","_callee","response","genres","$dIxxU","default","get","concat","_ctx","sent","data","console","log","_this","results","newSearchQuery","$eff785268c22474a$export$2e2bcd8739ae039","param","poster_path","name","title","genre_ids","release_date","first_air_date","vote_average","slice","$d7b411c7ba6deff6$var$apiService","$d7b411c7ba6deff6$var$GENRE_NAME","fetchGenres","then","genres1","localStorage","setItem","JSON","stringify","fetchImage","$lvqhk","saveInfo","cart","map","result","genresArr","forEach","genreID","$d7b411c7ba6deff6$var$genres","genOBJ","push","length","Object","values","join","document","querySelector","insertAdjacentHTML","$d7b411c7ba6deff6$var$addArticleImage","$d7b411c7ba6deff6$var$genreName","getItem","parse"],"version":3,"file":"index.4ddbb030.js.map"}